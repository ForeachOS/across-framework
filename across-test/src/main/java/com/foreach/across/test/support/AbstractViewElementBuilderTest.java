/*
 * Copyright 2019 the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.foreach.across.test.support;

import com.foreach.across.modules.web.ui.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

/**
 * Base unit test for {@link com.foreach.across.modules.web.ui.ViewElementBuilderSupport} implementations.  Mainly
 * verifies that all implemented methods return the same strongly typed builder instances - unless they are deliberately
 * excepted.
 * <p/>
 * This class is mainly for internal use.
 *
 * @param <T> ViewElementBuilder implementation extending ViewElementBuilderSupport
 * @param <U> ViewElement type that is generated by the builder
 * @see AbstractViewElementTemplateTest
 */
public abstract class AbstractViewElementBuilderTest<T extends ViewElementBuilderSupport<U, T>, U extends MutableViewElement>
{
	protected T builder;
	protected U element;

	protected ViewElementBuilderFactory builderFactory;
	protected ViewElementBuilderContext builderContext;

	@BeforeEach
	public void reset() {
		builderFactory = mock( ViewElementBuilderFactory.class );
		builderContext = spy( new DefaultViewElementBuilderContext() );

		builder = createBuilder( builderFactory );
		element = null;
	}

	@Test
	public void commonProperties() {
		assertSame( builder, builder.name( "componentName" ).customTemplate( "custom/template" ) );

		build();

		assertEquals( "componentName", element.getName() );
		assertEquals( "custom/template", element.getCustomTemplate() );
	}

	@Test
	@SuppressWarnings("unchecked")
	public void postProcessors() {
		ViewElementPostProcessor one = mock( ViewElementPostProcessor.class );
		ViewElementPostProcessor two = mock( ViewElementPostProcessor.class );

		assertSame( builder, builder.postProcessor( one )
		                            .postProcessor( two ) );

		build();

		verify( one ).postProcess( eq( builderContext ), any( ViewElement.class ) );
		verify( two ).postProcess( eq( builderContext ), any( ViewElement.class ) );
	}

//	@DevelopmentModeCondition
//	public void methodsShouldReturnBuilderInstance() throws Exception {
//		Class<?> c = builder.getClass();
//
//		Collection<String> methodExceptions = new ArrayList<>();
//		Collections.addAll( methodExceptions, "^build$", "^wait$", "^equals$", "^toString$",
//		                    "^hashCode$", "^notify$", "^notifyAll$", "^find[A-Z].+",
//		                    "^is[A-Z].+", "^has[A-Z].+" );
//		methodExceptions.addAll( nonBuilderReturningMethods() );
//
//		for ( Method method : c.getMethods() ) {
//			if ( Modifier.isPublic( method.getModifiers() )
//					&& !isExceptionMethod( method.getName(), methodExceptions ) ) {
//				Method declared = c.getDeclaredMethod( method.getName(), method.getParameterTypes() );
//
//				assertEquals( "Method [" + method + "] does not return same builder type",
//				              c,
//				              declared.getReturnType() );
//			}
//		}
//	}
//
//	private boolean isExceptionMethod( String methodName, Collection<String> methodExceptions ) {
//		for ( String exception : methodExceptions ) {
//			if ( Pattern.matches( exception, methodName ) ) {
//				return true;
//			}
//		}
//		return false;
//	}

	protected abstract T createBuilder( ViewElementBuilderFactory builderFactory );

//	protected Collection<String> nonBuilderReturningMethods() {
//		return Collections.emptyList();
//	}

	protected void build() {
		element = builder.build( builderContext );
	}
}
